@model CinemaApp.BL.DTOs.MovieDTOs.Movie.MovieDTO

<h2 class="my-3">Delete Film</h2>
<input type="hidden" asp-for="MovieID" />
<div class="alert alert-warning" role="alert">
    <h4 class="alert-heading">Are you sure you want to delete this film?</h4>
    <p>This action cannot be undone. Please confirm your choice.</p>
</div>
<div class="mb-4">
    <h5>Title: @Model.Title - ID: @Model.MovieID</h5>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">Description</dt>
        <dd class="col-sm-10">@Model.Description</dd>
    </dl>
</div>

<form asp-action="DeleteConfirmed" method="post" class="needs-validation" novalidate>
    <input type="hidden" asp-for="MovieID" />
    <div class="d-flex justify-content-between">
        <button type="submit" class="btn btn-danger">Delete</button>
        <a asp-action="Index" class="btn btn-secondary">Back to List</a>
    </div>
</form>

<script>
    (function () {
        'use strict';
        const forms = document.querySelectorAll('.needs-validation');

        Array.prototype.slice.call(forms).forEach(function (form) {
            form.addEventListener('submit', function (event) {
                if (!form.checkValidity()) {
                    event.preventDefault();
                    event.stopPropagation();
                }

                form.classList.add('was-validated');
            }, false);
        });
    })();
</script>

@if (!ViewData.ModelState.IsValid)
{
    <div class="alert alert-danger mt-3">
        <ul>
            @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
            {
                <li>@error.ErrorMessage</li>
            }
        </ul>
    </div>
}
