 @model CinemaApp.BL.DTOs.MovieDTOs.Movie.MovieDTO

@{
    ViewData["Title"] = Model.Title;
}

<div class="movie-details-container">
    <div class="movie-poster">
        <img src="@Model.PosterURL" alt="@Model.Title" class="poster-image" />
    </div>
    <div class="movie-info">
        <h1 class="movie-title">@Model.Title</h1>
        <p class="movie-description">@Model.Description</p>

        <div class="movie-metadata">
            <p>
                <strong>Genres:</strong>
                <span class="genre-tag">@Model.GenreName</span>
                @if (!string.IsNullOrEmpty(Model.GenreName1))
                {
                    <span class="genre-tag">@Model.GenreName1</span>
                }
                @if (!string.IsNullOrEmpty(Model.GenreName2))
                {
                    <span class="genre-tag">@Model.GenreName2</span>
                }
                @if (!string.IsNullOrEmpty(Model.GenreName3))
                {
                    <span class="genre-tag">@Model.GenreName3</span>
                }
                @if (!string.IsNullOrEmpty(Model.GenreName4))
                {
                    <span class="genre-tag">@Model.GenreName4</span>
                }
            </p>
            <p><strong>Duration:</strong> @Model.Duration.ToString(@"hh\:mm")</p>
            <p><strong>Release date:</strong> @Model.ReleaseDate.ToShortDateString()</p>
            <p><strong>Rating:</strong> @Model.Rating</p>
            <p><strong>Age limit:</strong> @Model.AgeLimit+</p>
        </div>

        <h2>Crewmates and positions</h2>
        <table class="crewmate-table">
            <thead>
                <tr>
                    <th>Crewmate</th>
                    <th>Position</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var crewmate in Model.MovieCrewmates)
                {
                    <tr>
                        <td>@crewmate.CrewmateName</td>
                        <td>@crewmate.PositionName</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<div class="trailer-container">
    <h2>Trailer</h2>
    @if (!string.IsNullOrEmpty(Model.TrailerURL))
    {
        <iframe width="200" height="150" src="@Model.TrailerURL.Replace("watch?v=", "embed/")" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
    }
    else
    {
        <p>No trailer available.</p>
    }
</div>


<div class="recommendations-container">
    <h2>Recommended Movies</h2>
    <div id="recommendations-loading">
        <div class="loading-spinner"></div>
        <p>Finding similar movies you might enjoy...</p>
    </div>
    <div id="recommendations-list" class="recommendations-grid"></div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const recommendationsList = document.getElementById("recommendations-list");
        const loadingIndicator = document.getElementById("recommendations-loading");
        const movieId = @Model.MovieID;
        console.log("movieId:", movieId);

        async function pollRecommendations() {
            try {
                const response = await fetch(`/api/ai/similar/${movieId}?maxResults=5`);
                if (response.status === 202) {
                    console.log("Recommendations still processing, trying again in 2 seconds");
                    setTimeout(pollRecommendations, 2000);
                    return;
                }
                if (!response.ok) {
                    throw new Error('Error: ' + response.status);
                }
                const data = await response.json();
                console.log("Data:", data);

                // Hide loading indicator with fade-out animation
                if (loadingIndicator) {
                    loadingIndicator.classList.add('fade-out');
                    setTimeout(() => {
                        loadingIndicator.style.display = "none";
                    }, 500);
                }

                recommendationsList.innerHTML = "";


                // Populate recommendations with staggered animation
                data.forEach((movie, index) => {
                    const movieCard = document.createElement("div");
                    movieCard.className = "movie-card";
                    movieCard.style.animationDelay = `${index * 0.15}s`;

                    movieCard.innerHTML = `
                        <a href="/Movie/UserDetails/${movie.movieId}" class="recommendation-link">
                            <div class="poster-wrapper">
                                <img src="${movie.posterUrl}" alt="${movie.title}" class="recommendation-poster" />
                                <div class="hover-info">
                                    <span>View details</span>
                                </div>
                            </div>
                            <h3 class="movie-title">${movie.title}</h3>
                        </a>
                    `;
                    recommendationsList.appendChild(movieCard);
                });

                // Display the recommendations container
                recommendationsList.style.display = "grid";

            } catch (error) {
                console.error("Error fetching recommendations:", error);
                if (loadingIndicator) {
                    loadingIndicator.innerHTML = `
                        <div class="error-message">
                            <i class="error-icon">!</i>
                            <p>Couldn't load recommendations. Please try again later.</p>
                        </div>
                    `;
                }
            }
        }

        pollRecommendations();
    });
</script>

<style>
    body {
        background-color: #0c486c;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        color: #333;
        margin: 0;
        padding: 0;
    }

    .movie-details-container {
        display: flex;
        gap: 30px;
        margin: 20px;
        padding: 20px;
        background-color: #fff;
        border-radius: 15px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        animation: fadeIn 1s ease-in-out;
    }

    .movie-poster {
        flex: 1;
        max-width: 400px;
    }

    .poster-image {
        width: 100%;
        border-radius: 10px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

        .poster-image:hover {
            transform: scale(1.05);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
        }

    .movie-info {
        flex: 2;
    }

    .movie-title {
        font-size: 2.5rem;
        margin-bottom: 15px;
        color: #222;
        animation: slideInLeft 0.8s ease-in-out;
    }

    .movie-description {
        font-size: 1.1rem;
        line-height: 1.6;
        color: #555;
        margin-bottom: 20px;
        animation: fadeIn 1.2s ease-in-out;
    }

    .movie-metadata {
        margin-top: 20px;
    }

        .movie-metadata p {
            margin: 8px 0;
            font-size: 1rem;
            color: #444;
        }

    .genre-tag {
        display: inline-block;
        background-color: #0c486c;
        color: #fff;
        padding: 5px 10px;
        border-radius: 5px;
        margin-right: 5px;
        font-size: 0.9rem;
        transition: background-color 0.3s ease;
    }

        .genre-tag:hover {
            background-color: #0056b3;
        }

    .crewmate-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
        animation: fadeIn 1.5s ease-in-out;
    }

        .crewmate-table th, .crewmate-table td {
            padding: 12px;
            border: 1px solid #ddd;
            text-align: left;
        }

        .crewmate-table th {
            background-color: #007bff;
            color: #fff;
        }

        .crewmate-table tr:hover {
            background-color: #f1f1f1;
        }

    .trailer-container {
        margin: 20px;
        padding: 20px;
        background-color: #fff;
        border-radius: 15px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        animation: fadeIn 1.8s ease-in-out;
    }



        .trailer-container h2 {
            margin-bottom: 15px;
            color: #222;
        }

    iframe {
        width: 100%;
        max-width: 800px;
        height: 450px;
        border-radius: 10px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

        iframe:hover {
            transform: scale(1.02);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
        }

    .recommendations-container {
        margin: 20px;
        padding: 20px;
        background-color: #fff;
        border-radius: 15px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        animation: fadeIn 2s ease-in-out;
    }

        .recommendations-container h2 {
            margin-bottom: 25px;
            color: #222;
            position: relative;
            display: inline-block;
        }

            .recommendations-container h2:after {
                content: '';
                position: absolute;
                bottom: -10px;
                left: 0;
                width: 50%;
                height: 3px;
                background: linear-gradient(to right, #0c486c, transparent);
                border-radius: 3px;
            }

    #recommendations-loading {
        text-align: center;
        padding: 30px;
        transition: opacity 0.5s ease;
    }

        #recommendations-loading.fade-out {
            opacity: 0;
        }

    .loading-spinner {
        border: 4px solid rgba(0, 0, 0, 0.1);
        border-radius: 50%;
        border-top: 4px solid #0c486c;
        width: 40px;
        height: 40px;
        margin: 0 auto 15px;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    .recommendations-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        gap: 25px;
        padding: 10px;
    }

    .movie-card {
        background-color: #f9f9f9;
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 3px 10px rgba(0,0,0,0.1);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        animation: fadeInUp 0.5s ease forwards;
        opacity: 0;
    }

        .movie-card:hover {
            transform: translateY(-10px);
            box-shadow: 0 15px 25px rgba(0,0,0,0.2);
        }

    .recommendation-link {
        text-decoration: none;
        color: inherit;
        display: block;
    }

    .poster-wrapper {
        position: relative;
        overflow: hidden;
        aspect-ratio: 2/3;
    }

    .recommendation-poster {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.5s ease;
    }

    .movie-card:hover .recommendation-poster {
        transform: scale(1.1);
    }

    .hover-info {
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        background: linear-gradient(to top, rgba(0,0,0,0.8), transparent);
        padding: 15px 10px;
        transform: translateY(100%);
        transition: transform 0.3s ease;
        text-align: center;
    }

        .hover-info span {
            color: white;
            font-weight: bold;
            font-size: 0.9rem;
        }

    .movie-card:hover .hover-info {
        transform: translateY(0);
    }

    .movie-card h3 {
        padding: 15px 10px;
        margin: 0;
        font-size: 1rem;
        text-align: center;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .error-message {
        padding: 20px;
        background-color: #fff3f3;
        border-radius: 8px;
        text-align: center;
        border: 1px solid #ffcccb;
    }

    .error-icon {
        display: inline-block;
        width: 30px;
        height: 30px;
        line-height: 28px;
        text-align: center;
        background-color: #ff5252;
        color: white;
        border-radius: 50%;
        font-weight: bold;
        font-style: normal;
        margin-bottom: 10px;
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
        }

        to {
            opacity: 1;
        }
    }


    @@keyframes slideInLeft {
        from {
            transform: translateX(-50px);
            opacity: 0;
        }

        to {
            transform: translateX(0);
            opacity: 1;
        }
    }

    @@keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@media (max-width: 768px) {
        .movie-details-container {
            flex-direction: column;
        }

        .movie-poster {
            max-width: 100%;
        }

        .recommendations-grid {
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
        }
    }
</style>